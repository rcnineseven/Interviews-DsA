217. Contains Duplicate


Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Method 1: Sorting
-Sort array first (log n)
-Sweep array since sorted duplicates appear after each other o(n)

O(N Log N)

public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); //sort array first 
        if(nums.length==0 || nums==null){
            return false;
        }
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]==nums[i+1]){
                return true;
            }
        }
        return false;
    }


Method 2: HashSet (hash) 

public boolean containsDuplicate(int[] nums) {
       Set<Integer> hashSet = new HashSet<>();
        
        if(nums.length==0|| nums==null)
            return false;
        
        for(int i : nums){
            if(hashSet.contains(i)){
                return true;
            }
            else{
                hashSet.add(i);
            }
            
        }
        
        return false;
    }




------------------------------------------------

53. Maximum SubArray

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

ex. Input: nums = [5,4,-1,7,8]
O(N^2) - 2 passses

  public int maxSubArray(int[] nums) {
    int max = Integer.MIN_VALUE;
    
    for(int i=0;i<nums.length;i++){
        int currMax=0;
        //start loop at i as we want to find contigious!
        //loops through all contiguous starting from 0
        for(int j=i;j<nums.length;j++){
            currMax+=nums[j];
            max = Math.max(currMax,max);
        }
    }
    return max;  
 }

** We can use Kadanes dyanmic programming algorithm to solve in O(N) - 1 pass

 public int maxSubArray(int[] nums) {
        
    int startMax = Integer.MIN_VALUE;
    int maxSoFar =0;
    //Kadanes Algorithm // O(n) -> singular pass
    for(int i=0;i<nums.length;i++){
        maxSoFar+=nums[i];
        if(startMax<maxSoFar){
            startMax = maxSoFar;
        }
        //if negative reset as it doesn't contribute to a larger sum
        if(maxSoFar<0){
            maxSoFar=0;
        }
    }
    return startMax;
    
    }